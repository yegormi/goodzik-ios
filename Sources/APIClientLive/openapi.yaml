openapi: 3.1.0
paths:
  /signup:
    post:
      operationId: signup
      summary: Sign up
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /login:
    post:
      operationId: login
      summary: Log in
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /me:
    get:
      operationId: getMe
      summary: Get the current user
      tags:
        - user
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /news:
    get:
      operationId: getNews
      summary: News
      tags:
        - news
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /guides:
    post:
      operationId: createGuide
      summary: Create a guide
      tags:
        - guide
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGuideDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getGuides
      summary: Get guides
      tags:
        - guide
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuideDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /guides/{id}:
    get:
      operationId: getGuide
      summary: Get a guide
      tags:
        - guide
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideDetailsDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
    put:
      operationId: updateGuide
      summary: Update a guide
      tags:
        - guide
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuideDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteGuide
      summary: Delete a guide
      tags:
        - guide
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /guide-categories:
    post:
      operationId: createGuideCategory
      summary: Create a guide category
      tags:
        - guide-category
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGuideCategoryDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideCategoryDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getGuideCategories
      summary: Get all guide categories
      tags:
        - guide-category
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuideCategoryDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /guide-categories/{id}:
    get:
      operationId: getGuideCategory
      summary: Get a guide category
      tags:
        - guide-category
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideCategoryDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    put:
      operationId: updateGuideCategory
      summary: Update a guide category
      tags:
        - guide-category
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuideCategoryDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteGuideCategory
      summary: Delete a guide category
      tags:
        - guide-category
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /guide-steps:
    post:
      operationId: createGuideStep
      summary: Create a guide step
      tags:
        - guide-step
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGuideStepDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideStepDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getGuideSteps
      summary: Get all guide steps
      tags:
        - guide-step
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuideStepDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /guide-steps/{id}:
    get:
      operationId: getGuideStep
      summary: Get a guide step
      tags:
        - guide-step
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideStepDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    put:
      operationId: updateGuideStep
      summary: Update a guide step
      tags:
        - guide-step
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuideStepDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteGuideStep
      summary: Delete a guide step
      tags:
        - guide-step
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /partners:
    post:
      operationId: createPartner
      summary: Create a Partner
      tags:
        - partner
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePartnerDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getPartners
      summary: Get Partners
      tags:
        - partner
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartnerDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /partners/{id}:
    get:
      operationId: getPartner
      summary: Get a Partner
      tags:
        - partner
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
    put:
      operationId: updatePartner
      summary: Update a Partner
      tags:
        - partner
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartnerDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deletePartner
      summary: Delete a Partner
      tags:
        - partner
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /team-members:
    post:
      operationId: createTeamMember
      summary: Create a team member
      tags:
        - team-member
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamMemberDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getTeamMembers
      summary: Get team members
      tags:
        - team-member
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMemberDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /team-members/{id}:
    get:
      operationId: getTeamMember
      summary: Get a team member
      tags:
        - team-member
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
    put:
      operationId: updateTeamMember
      summary: Update a team member
      tags:
        - team-member
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamMemberDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteTeamMember
      summary: Delete a team member
      tags:
        - team-member
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /locations:
    post:
      operationId: createLocation
      summary: Create a location
      tags:
        - location
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getLocations
      summary: Get locations
      tags:
        - location
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /locations/{id}:
    get:
      operationId: getLocation
      summary: Get a location
      tags:
        - location
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
    put:
      operationId: updateLocation
      summary: Update a location
      tags:
        - location
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteLocation
      summary: Delete a location
      tags:
        - location
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /guide-comments:
    post:
      operationId: createGuideComment
      summary: Create a guide comment
      tags:
        - guide-comment
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGuideCommentDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideCommentDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getGuideComments
      summary: Get guide comments
      tags:
        - guide-comment
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuideCommentDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /guide-comments/{id}:
    get:
      operationId: getGuideComment
      summary: Get a guide comment
      tags:
        - guide-comment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideCommentDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
    put:
      operationId: updateGuideComment
      summary: Update a guide comment
      tags:
        - guide-comment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuideCommentDto'
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteGuideComment
      summary: Delete a guide comment
      tags:
        - guide-comment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
info:
  title: Sewing Division API
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://goodzik-api.eventbook.pp.ua
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupRequestDto:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - userName
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: 66c6fab4f13bf5134c167e8b
          description: The id of the user
        userName:
          type: string
          example: johnDoe1999
          description: Username of the user
        email:
          type: string
          example: John Doe
          description: The name of the user
        role:
          type: string
          example: customer
          description: Role of the user
      required:
        - id
        - userName
        - email
        - role
    SignupResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
    ApiErrorDto:
      type: object
      properties:
        code:
          type: string
          description: The error code
          example: entity-not-found
          enum:
            - internal
            - entity-not-found
            - email-not-unique
            - unauthorized
            - forbidden
        message:
          type: string
          description: A human-readable message describing the error
          example: Entity not found
        details:
          type: object
          description: Additional details about the error
          example:
            entity: User
      required:
        - message
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          example: admin123
      required:
        - email
        - password
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
    NewsDto:
      type: object
      properties:
        id:
          type: string
          example: '1111'
          description: The id of the news
        title:
          type: string
          example: new item
          description: Title of the news
        image:
          description: Images from news
          type: array
          items:
            type: string
        description:
          type: string
          description: Text of news
        author:
          type: string
          example: makson10
          description: Author of the news
        date:
          format: date-time
          type: string
          description: Date of the news
      required:
        - id
        - title
        - image
        - description
        - author
        - date
    NewsResponseDto:
      type: object
      properties:
        news:
          type: array
          items:
            $ref: '#/components/schemas/NewsDto'
      required:
        - news
    CreateGuideStepDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        order:
          type: number
      required:
        - name
        - description
        - image
        - order
    CreateGuideDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        exampleImages:
          type: array
          items:
            type: string
        videoUrl:
          type: string
        categories:
          type: array
          items:
            type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/CreateGuideStepDto'
      required:
        - title
        - description
        - exampleImages
        - videoUrl
        - categories
        - steps
    GuideDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          format: date-time
          type: string
        exampleImages:
          type: array
          items:
            type: string
        videoUrl:
          type: string
        author:
          $ref: '#/components/schemas/UserDto'
      required:
        - id
        - title
        - description
        - date
        - exampleImages
        - videoUrl
        - author
    GuideStepDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
        order:
          type: number
      required:
        - id
        - name
        - description
        - image
        - order
    GuideCommentDto:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        author:
          type: string
      required:
        - id
        - text
        - author
    GuideDetailsDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          format: date-time
          type: string
        exampleImages:
          type: array
          items:
            type: string
        videoUrl:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/GuideStepDto'
        author:
          $ref: '#/components/schemas/UserDto'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/GuideCommentDto'
      required:
        - id
        - title
        - description
        - date
        - exampleImages
        - videoUrl
        - steps
        - author
        - comments
    UpdateGuideDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        exampleImages:
          type: array
          items:
            type: string
        videoUrl:
          type: string
        categories:
          type: array
          items:
            type: string
    CreateGuideCategoryDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    GuideCategoryDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    UpdateGuideCategoryDto:
      type: object
      properties:
        name:
          type: string
    UpdateGuideStepDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        order:
          type: number
    CreatePartnerDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    PartnerDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    UpdatePartnerDto:
      type: object
      properties:
        name:
          type: string
    CreateTeamMemberDto:
      type: object
      properties:
        fullName:
          type: string
        imageUrl:
          type: string
        position:
          type: string
      required:
        - fullName
        - imageUrl
        - position
    TeamMemberDto:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        imageUrl:
          type: string
        position:
          type: string
      required:
        - id
        - fullName
        - imageUrl
        - position
    UpdateTeamMemberDto:
      type: object
      properties:
        fullName:
          type: string
        imageUrl:
          type: string
        position:
          type: string
    CreateLocationDto:
      type: object
      properties:
        title:
          type: string
        lat:
          type: number
        lng:
          type: number
        contactFullName:
          type: string
        contactPhoneNumber:
          type: string
      required:
        - title
        - lat
        - lng
        - contactFullName
        - contactPhoneNumber
    LocationDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        lat:
          type: number
        lng:
          type: number
        contactFullName:
          type: string
        contactPhoneNumber:
          type: string
      required:
        - id
        - title
        - lat
        - lng
        - contactFullName
        - contactPhoneNumber
    UpdateLocationDto:
      type: object
      properties:
        title:
          type: string
        lat:
          type: number
        lng:
          type: number
        contactFullName:
          type: string
        contactPhoneNumber:
          type: string
    CreateGuideCommentDto:
      type: object
      properties:
        text:
          type: string
        guideId:
          type: string
      required:
        - text
        - guideId
    UpdateGuideCommentDto:
      type: object
      properties:
        text:
          type: string
